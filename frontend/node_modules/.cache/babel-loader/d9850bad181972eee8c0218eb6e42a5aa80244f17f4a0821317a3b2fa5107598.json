{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simon\\\\Desktop\\\\twitter-clone\\\\frontend\\\\src\\\\sites\\\\Profile.tsx\",\n  _s = $RefreshSig$();\nimport { gql, useQuery } from '@apollo/client';\nimport '../styles/Profile.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PROFILE_USER_QUERY = gql`\nquery {\n    Profile {\n      id\n      userId\n      bio\n      location\n      website\n    }\n    me {\n      id\n      name\n      createdAt\n    }\n}\n`;\nexport default function Profile() {\n  _s();\n  let [profileImageBase64String, setProfileImageBase64String] = useState('');\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PROFILE_USER_QUERY);\n  if (loading || error) return '';\n  /*useEffect(() => {\r\n      async function downloadProfileImage() {\r\n          try {\r\n              const response = await fetch('http://localhost:4001/downloadProfileImage', { // a promise that was returned by fetch() is resolved with the Response object which represents a response to a request\r\n                  method: 'POST',\r\n                  body: 'user_id_' + data.me.id + '_profile_image'\r\n              });\r\n              const responseData = await response.text(); // \"text()\" returns the \"Promise<string>\" type\r\n              setProfileImageBase64String('data:;base64,' + responseData);\r\n          }\r\n          catch(error) {\r\n              console.log('Error downloading the profile image');\r\n          }\r\n      }\r\n      downloadProfileImage();\r\n  },[]);*/\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: \"as\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Profile, \"tsscC3mT3KVD2Y8othofdQ5Jgo4=\", false, function () {\n  return [useQuery];\n});\n_c = Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["gql","useQuery","useState","jsxDEV","_jsxDEV","PROFILE_USER_QUERY","Profile","_s","profileImageBase64String","setProfileImageBase64String","loading","error","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Simon/Desktop/twitter-clone/frontend/src/sites/Profile.tsx"],"sourcesContent":["import { gql, useQuery } from '@apollo/client';\r\nimport CreateOrUpdateProfile from '../components/CreateOrUpdateProfile';\r\nimport '../styles/Profile.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const PROFILE_USER_QUERY = gql`\r\nquery {\r\n    Profile {\r\n      id\r\n      userId\r\n      bio\r\n      location\r\n      website\r\n    }\r\n    me {\r\n      id\r\n      name\r\n      createdAt\r\n    }\r\n}\r\n`\r\n;\r\n\r\nexport default function Profile() {\r\n    let [profileImageBase64String, setProfileImageBase64String] = useState('');\r\n    const {loading, error, data} = useQuery(PROFILE_USER_QUERY);\r\n    if(loading || error) return '';\r\n    /*useEffect(() => {\r\n        async function downloadProfileImage() {\r\n            try {\r\n                const response = await fetch('http://localhost:4001/downloadProfileImage', { // a promise that was returned by fetch() is resolved with the Response object which represents a response to a request\r\n                    method: 'POST',\r\n                    body: 'user_id_' + data.me.id + '_profile_image'\r\n                });\r\n                const responseData = await response.text(); // \"text()\" returns the \"Promise<string>\" type\r\n                setProfileImageBase64String('data:;base64,' + responseData);\r\n            }\r\n            catch(error) {\r\n                console.log('Error downloading the profile image');\r\n            }\r\n        }\r\n        downloadProfileImage();\r\n    },[]);*/\r\n  return (\r\n    <div className='profile-container'>\r\nas\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE9C,OAAO,uBAAuB;AAC9B,SAASC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,kBAAkB,GAAGL,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAGD,eAAe,SAASM,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAC9B,IAAI,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1E,MAAM;IAACQ,OAAO;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGX,QAAQ,CAACI,kBAAkB,CAAC;EAC3D,IAAGK,OAAO,IAAIC,KAAK,EAAE,OAAO,EAAE;EAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,oBACEP,OAAA;IAAKS,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAAC;EAEnC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEV;AAACX,EAAA,CAzBuBD,OAAO;EAAA,QAEIL,QAAQ;AAAA;AAAAkB,EAAA,GAFnBb,OAAO;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}