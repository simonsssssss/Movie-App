{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simon\\\\Desktop\\\\twitter-clone\\\\frontend\\\\src\\\\sites\\\\Profile.tsx\",\n  _s = $RefreshSig$();\nimport { gql } from '@apollo/client';\nimport '../styles/Profile.css';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PROFILE_USER_QUERY = gql`\nquery {\n    Profile {\n      id\n      userId\n      bio\n      location\n      website\n    }\n    me {\n      id\n      name\n      createdAt\n    }\n}\n`;\nexport default function Profile() {\n  _s();\n  let [profileImageBase64String, setProfileImageBase64String] = useState('');\n  let okok = '';\n  console.log(okok);\n  //const {data} = useQuery(PROFILE_USER_QUERY);\n\n  useEffect(() => {\n    async function downloadProfileImage() {\n      try {\n        const response = await fetch('http://localhost:4001/downloadProfileImage', {\n          // a promise that was returned by fetch() is resolved with the Response object which represents a response to a request\n          method: 'POST'\n          //body: 'user_id_' + data.me.id + '_profile_image'\n        });\n        const responseData = await response.text(); // \"text()\" returns the \"Promise<string>\" type\n        setProfileImageBase64String('data:;base64,' + responseData);\n        okok = 'okjokjokj';\n      } catch (error) {\n        console.log('Error downloading the profile image');\n      }\n    }\n    downloadProfileImage();\n  }, []);\n  console.log(okok);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Profile, \"hzBZFzEJ7DMokO+CIteIa1ftaEo=\");\n_c = Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["gql","useState","useEffect","jsxDEV","_jsxDEV","PROFILE_USER_QUERY","Profile","_s","profileImageBase64String","setProfileImageBase64String","okok","console","log","downloadProfileImage","response","fetch","method","responseData","text","error","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Simon/Desktop/twitter-clone/frontend/src/sites/Profile.tsx"],"sourcesContent":["import { gql, useQuery } from '@apollo/client';\r\nimport CreateOrUpdateProfile from '../components/CreateOrUpdateProfile';\r\nimport '../styles/Profile.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const PROFILE_USER_QUERY = gql`\r\nquery {\r\n    Profile {\r\n      id\r\n      userId\r\n      bio\r\n      location\r\n      website\r\n    }\r\n    me {\r\n      id\r\n      name\r\n      createdAt\r\n    }\r\n}\r\n`\r\n;\r\n\r\nexport default function Profile() {\r\n    let [profileImageBase64String, setProfileImageBase64String] = useState('');\r\n    let okok = '';\r\n    console.log(okok);\r\n    //const {data} = useQuery(PROFILE_USER_QUERY);\r\n    \r\n    useEffect(() => {\r\n        async function downloadProfileImage() {\r\n            try {\r\n                const response = await fetch('http://localhost:4001/downloadProfileImage', { // a promise that was returned by fetch() is resolved with the Response object which represents a response to a request\r\n                    method: 'POST',\r\n                    //body: 'user_id_' + data.me.id + '_profile_image'\r\n                });\r\n                const responseData = await response.text(); // \"text()\" returns the \"Promise<string>\" type\r\n                setProfileImageBase64String('data:;base64,' + responseData);\r\n                okok = 'okjokjokj';\r\n            }\r\n            catch(error) {\r\n                console.log('Error downloading the profile image');\r\n            }\r\n        }\r\n        downloadProfileImage();\r\n    },[]);console.log(okok);\r\n  return (\r\n    <div className='profile-container'>\r\n        \r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,SAASA,GAAG,QAAkB,gBAAgB;AAE9C,OAAO,uBAAuB;AAC9B,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,kBAAkB,GAAGL,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAGD,eAAe,SAASM,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAC9B,IAAI,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1E,IAAIS,IAAI,GAAG,EAAE;EACbC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB;;EAEAR,SAAS,CAAC,MAAM;IACZ,eAAeW,oBAAoBA,CAAA,EAAG;MAClC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;UAAE;UACzEC,MAAM,EAAE;UACR;QACJ,CAAC,CAAC;QACF,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5CT,2BAA2B,CAAC,eAAe,GAAGQ,YAAY,CAAC;QAC3DP,IAAI,GAAG,WAAW;MACtB,CAAC,CACD,OAAMS,KAAK,EAAE;QACTR,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MACtD;IACJ;IACAC,oBAAoB,CAAC,CAAC;EAC1B,CAAC,EAAC,EAAE,CAAC;EAACF,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACzB,oBACEN,OAAA;IAAKgB,SAAS,EAAC;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7B,CAAC;AAEV;AAACjB,EAAA,CA5BuBD,OAAO;AAAAmB,EAAA,GAAPnB,OAAO;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}