{"ast":null,"code":"import * as React from \"rehackt\";\nimport { getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef } from \"../internal/index.js\";\n/**\n * A React hook that returns a `refetch` and `fetchMore` function for a given\n * `queryRef`.\n *\n * This is useful to get access to handlers for a `queryRef` that was created by\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\n * a different component are inaccessible.\n *\n * @example\n * ```tsx\n * const MyComponent({ queryRef }) {\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\n *\n *   // ...\n * }\n * ```\n * @since 3.9.0\n * @param queryRef - A `QueryReference` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\n */\nexport function useQueryRefHandlers(queryRef) {\n  var _a = React.useState(queryRef),\n    previousQueryRef = _a[0],\n    setPreviousQueryRef = _a[1];\n  var _b = React.useState(queryRef),\n    wrappedQueryRef = _b[0],\n    setWrappedQueryRef = _b[1];\n  var internalQueryRef = unwrapQueryRef(queryRef);\n  // To ensure we can support React transitions, this hook needs to manage the\n  // queryRef state and apply React's state value immediately to the existing\n  // queryRef since this hook doesn't return the queryRef directly\n  if (previousQueryRef !== queryRef) {\n    setPreviousQueryRef(queryRef);\n    setWrappedQueryRef(queryRef);\n  } else {\n    updateWrappedQueryRef(queryRef, getWrappedPromise(wrappedQueryRef));\n  }\n  var refetch = React.useCallback(function (variables) {\n    var promise = internalQueryRef.refetch(variables);\n    setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  var fetchMore = React.useCallback(function (options) {\n    var promise = internalQueryRef.fetchMore(options);\n    setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  return {\n    refetch: refetch,\n    fetchMore: fetchMore\n  };\n}","map":null,"metadata":{},"sourceType":"module"}