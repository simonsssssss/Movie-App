{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simon\\\\Desktop\\\\twitter-clone\\\\frontend\\\\src\\\\sites\\\\Profile.tsx\",\n  _s = $RefreshSig$();\nimport { gql, useQuery } from '@apollo/client';\nimport '../styles/Profile.css';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PROFILE_USER_QUERY = gql`\nquery {\n    Profile {\n      id\n      userId\n      bio\n      location\n      website\n    }\n    me {\n      id\n      name\n      createdAt\n    }\n}\n`;\nfunction Profile() {\n  _s();\n  let [profileImageBase64String, setProfileImageBase64String] = useState('');\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PROFILE_USER_QUERY);\n  console.log(data);\n  if (loading || error) {\n    useEffect(() => {\n      async function downloadProfileImage() {\n        try {\n          const response = await fetch('http://localhost:4001/downloadProfileImage', {\n            // a promise that was returned by fetch() is resolved with the Response object which represents a response to a request\n            method: 'POST',\n            body: 'user_id_' + data.me.id + '_profile_image'\n          });\n          const responseData = await response.text(); // \"text()\" returns the \"Promise<string>\" type\n          setProfileImageBase64String('data:;base64,' + responseData);\n        } catch (error) {\n          console.log('Error downloading the profile image', error);\n        }\n      }\n      downloadProfileImage();\n    }, []);\n  } else {\n    useEffect(() => {\n      async function downloadProfileImage() {\n        try {\n          const response = await fetch('http://localhost:4001/downloadProfileImage', {\n            // a promise that was returned by fetch() is resolved with the Response object which represents a response to a request\n            method: 'POST',\n            body: 'user_id_' + data.me.id + '_profile_image'\n          });\n          const responseData = await response.text(); // \"text()\" returns the \"Promise<string>\" type\n          setProfileImageBase64String('data:;base64,' + responseData);\n        } catch (error) {\n          console.log('Error downloading the profile image', error);\n        }\n      }\n      downloadProfileImage();\n    }, []);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Profile, \"iQ4jhd9VWihIbSkW1FgQDcfJPuc=\", false, function () {\n  return [useQuery];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["gql","useQuery","useState","useEffect","jsxDEV","_jsxDEV","PROFILE_USER_QUERY","Profile","_s","profileImageBase64String","setProfileImageBase64String","loading","error","data","console","log","downloadProfileImage","response","fetch","method","body","me","id","responseData","text","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Simon/Desktop/twitter-clone/frontend/src/sites/Profile.tsx"],"sourcesContent":["import { gql, useQuery } from '@apollo/client';\r\nimport CreateOrUpdateProfile from '../components/CreateOrUpdateProfile';\r\nimport '../styles/Profile.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const PROFILE_USER_QUERY = gql`\r\nquery {\r\n    Profile {\r\n      id\r\n      userId\r\n      bio\r\n      location\r\n      website\r\n    }\r\n    me {\r\n      id\r\n      name\r\n      createdAt\r\n    }\r\n}\r\n`\r\n;\r\n\r\nfunction Profile() {\r\n    let [profileImageBase64String, setProfileImageBase64String] = useState('');\r\n    const {loading, error, data} = useQuery(PROFILE_USER_QUERY);\r\n    console.log(data);\r\n    if(loading || error) {\r\n      useEffect(() => {\r\n        async function downloadProfileImage() {  \r\n            try {\r\n                const response = await fetch('http://localhost:4001/downloadProfileImage', { // a promise that was returned by fetch() is resolved with the Response object which represents a response to a request\r\n                    method: 'POST',\r\n                    body: 'user_id_' + data.me.id + '_profile_image'\r\n                });\r\n                const responseData = await response.text(); // \"text()\" returns the \"Promise<string>\" type\r\n                setProfileImageBase64String('data:;base64,' + responseData);\r\n            }\r\n            catch(error) {\r\n                console.log('Error downloading the profile image',error);\r\n            }\r\n        }\r\n        downloadProfileImage();\r\n    },[]);\r\n    }\r\n    else {\r\n      useEffect(() => {\r\n        async function downloadProfileImage() {  \r\n            try {\r\n                const response = await fetch('http://localhost:4001/downloadProfileImage', { // a promise that was returned by fetch() is resolved with the Response object which represents a response to a request\r\n                    method: 'POST',\r\n                    body: 'user_id_' + data.me.id + '_profile_image'\r\n                });\r\n                const responseData = await response.text(); // \"text()\" returns the \"Promise<string>\" type\r\n                setProfileImageBase64String('data:;base64,' + responseData);\r\n            }\r\n            catch(error) {\r\n                console.log('Error downloading the profile image',error);\r\n            }\r\n        }\r\n        downloadProfileImage();\r\n    },[]);\r\n    }\r\n    \r\n  return (\r\n    <div className='profile-container'>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE9C,OAAO,uBAAuB;AAC9B,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,kBAAkB,GAAGN,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAGD,SAASO,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,IAAI,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1E,MAAM;IAACS,OAAO;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGZ,QAAQ,CAACK,kBAAkB,CAAC;EAC3DQ,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,IAAGF,OAAO,IAAIC,KAAK,EAAE;IACnBT,SAAS,CAAC,MAAM;MACd,eAAea,oBAAoBA,CAAA,EAAG;QAClC,IAAI;UACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;YAAE;YACzEC,MAAM,EAAE,MAAM;YACdC,IAAI,EAAE,UAAU,GAAGP,IAAI,CAACQ,EAAE,CAACC,EAAE,GAAG;UACpC,CAAC,CAAC;UACF,MAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;UAC5Cd,2BAA2B,CAAC,eAAe,GAAGa,YAAY,CAAC;QAC/D,CAAC,CACD,OAAMX,KAAK,EAAE;UACTE,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAACH,KAAK,CAAC;QAC5D;MACJ;MACAI,oBAAoB,CAAC,CAAC;IAC1B,CAAC,EAAC,EAAE,CAAC;EACL,CAAC,MACI;IACHb,SAAS,CAAC,MAAM;MACd,eAAea,oBAAoBA,CAAA,EAAG;QAClC,IAAI;UACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;YAAE;YACzEC,MAAM,EAAE,MAAM;YACdC,IAAI,EAAE,UAAU,GAAGP,IAAI,CAACQ,EAAE,CAACC,EAAE,GAAG;UACpC,CAAC,CAAC;UACF,MAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;UAC5Cd,2BAA2B,CAAC,eAAe,GAAGa,YAAY,CAAC;QAC/D,CAAC,CACD,OAAMX,KAAK,EAAE;UACTE,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAACH,KAAK,CAAC;QAC5D;MACJ;MACAI,oBAAoB,CAAC,CAAC;IAC1B,CAAC,EAAC,EAAE,CAAC;EACL;EAEF,oBACEX,OAAA;IAAKoB,SAAS,EAAC;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7B,CAAC;AAEV;AAACrB,EAAA,CA9CQD,OAAO;EAAA,QAEmBN,QAAQ;AAAA;AAAA6B,EAAA,GAFlCvB,OAAO;AAgDhB,eAAeA,OAAO;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}